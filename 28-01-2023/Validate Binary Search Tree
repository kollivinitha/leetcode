Question:
Given the root of a binary tree, determine if it is a valid binary search tree (BST).

A valid BST is defined as follows:

The left 
subtree
 of a node contains only nodes with keys less than the node's key.
The right subtree of a node contains only nodes with keys greater than the node's key.
Both the left and right subtrees must also be binary search trees.

Solution:
class Solution {
    public boolean isValidBST(TreeNode root) {
        if(root==null)
        {
            return true;
        }
        List<Integer> l = new ArrayList<>();
        Stack<TreeNode> s = new Stack<>();
        while(root != null || !(s.empty()))
        {
            while(root != null)
            {
                s.push(root);
                root=root.left;
            }
            root=s.pop();
            l.add(root.val);
            root=root.right;
        }
        int n=l.size();
        for(int i=1;i<n;i++)
        {
            if(l.get(i)<=l.get(i-1))
            {
                return false;
            }
        }
        return true;

    }
}

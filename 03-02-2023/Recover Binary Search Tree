Question:
You are given the root of a binary search tree (BST), where the values of exactly two nodes of the tree were swapped by mistake. Recover the tree without changing its structure.

Solution:
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    TreeNode prev=new TreeNode(Integer.MIN_VALUE);
    TreeNode first=null;
    TreeNode middle=null;
    TreeNode last=null;
    public void inorder(TreeNode root)
    {
        if(root == null)
        {
            return;
        }
        inorder(root.left);
        if(prev != null && root.val < prev.val)
        {
            if(first==null)
            {
                first=prev;
                middle=root;
            }
            last=root;
        }
        prev=root;
        inorder(root.right);
    }
    public void recoverTree(TreeNode root) {
        
        
        inorder(root);
        if(first != null && last!= null)
        {
            int temp=first.val;
            first.val=last.val;
            last.val=temp;
        }
        else if (last==null)
        {
            int tem=first.val;
            first.val=middle.val;
            middle.val=tem;
        }
    }
}

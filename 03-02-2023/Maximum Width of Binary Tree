Question:
Given the root of a binary tree, return the maximum width of the given tree.
The maximum width of a tree is the maximum width among all levels.
The width of one level is defined as the length between the end-nodes (the leftmost and rightmost non-null nodes), where the null nodes between the end-nodes that would be present in a complete binary tree extending down to that level are also counted into the length calculation.
It is guaranteed that the answer will in the range of a 32-bit signed integer.

Solution:
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int widthOfBinaryTree(TreeNode root) {
        HashMap<TreeNode,Integer> map = new HashMap<>(); 
        if(root == null)
        {
            return 0;
        }
        map.put(root,1);
        int c=0;
        int max=0;
        Queue<TreeNode> queue = new LinkedList<>();
        queue.offer(root);
        while(!queue.isEmpty())
        {
            int start=0;
            int end=0;
            int s=queue.size();
            for(int i=0;i<s;i++)
            {
                TreeNode node = queue.poll();
                if(i==0)
                {
                    start=map.get(node);
                }
                if(i==s-1)
                {
                    end=map.get(node);
                }
                if(node.left != null)
                {
                    map.put(node.left,2*map.get(node));
                    queue.offer(node.left);
                }
                if(node.right!=null)
                {
                    map.put(node.right,2*map.get(node)+1);
                    queue.offer(node.right);
                }
            }
            c=end-start+1;
            max=Math.max(max,c);
        }
        return max;
    }
}

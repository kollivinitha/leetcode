Question:
Given an array of integers preorder, which represents the preorder traversal of a BST (i.e., binary search tree), construct the tree and return its root.

It is guaranteed that there is always possible to find a binary search tree with the given requirements for the given test cases.

A binary search tree is a binary tree where for every node, any descendant of Node.left has a value strictly less than Node.val, and any descendant of Node.right has a value strictly greater than Node.val.

A preorder traversal of a binary tree displays the value of the node first, then traverses Node.left, then traverses Node.right.

Solution:
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    int i=0;
    public TreeNode buildBST(int[] p,int s,int e)
    {
        if(s>e )
        {
            return null;
        }
        TreeNode node = new TreeNode(p[i++]);
        int j=i;
        while(j<p.length)
        {
            if(p[j]>node.val)
            {
                break;
            }
            j++;
        }
        node.left=buildBST(p,i,j-1);
        node.right=buildBST(p,j,e);
        return node;
    }
    public TreeNode bstFromPreorder(int[] preorder) {
        int start=0;
        int end=preorder.length-1;
        TreeNode n=buildBST(preorder,start,end);
        return n;
    }
}

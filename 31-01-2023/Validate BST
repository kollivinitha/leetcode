Question:
Given the root of a binary tree, determine if it is a valid binary search tree (BST).

A valid BST is defined as follows:

The left subtree of a node contains only nodes with keys less than the node's key.
The right subtree of a node contains only nodes with keys greater than the node's key.
Both the left and right subtrees must also be binary search trees.

Solution:
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public boolean isValidBST(TreeNode root) {
        return inorder(root,null,null);
    }
public boolean inorder(TreeNode root,Integer low,Integer high)
{
    if(root == null)
    {
        return true;
    }
    if((low != null && root.val <= low) || (high != null && root.val>= high))
    {
        return false;
    }
    boolean l=inorder(root.left,low,root.val);
    boolean r=inorder(root.right,root.val,high);
    return l && r; 
}

    }

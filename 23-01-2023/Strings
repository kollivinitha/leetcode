Longest Substring without Repeating Characters
Question:
    Given a string s, find the length of the longest substring without repeating characters.
Solution:
class Solution {
    public int lengthOfLongestSubstring(String s) {
        HashSet<Character> l = new HashSet();
        int a=0;
        int b=0;
        int m=0;
        while(b<s.length()){
            char c= s.charAt(b);
            if(!l.contains(c))
            {
                l.add(c);
                b++;
                m=Math.max(l.size(),m);
            }
            else{
                char d=s.charAt(a);
                l.remove(d);
                a++;
            }
        }
        return(m);
}
}

First Unique Character in a String
Question:
Given a string s, find the first non-repeating character in it and return its index. If it does not exist, return -1.
Solution:
class Solution:
    def firstUniqChar(self, s: str) -> int:
        for i in range(0,len(s)):
            if(s.count(s[i])==1):
                return i
        else:
            return -1
